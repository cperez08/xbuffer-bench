// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Notification struct {
	_tab flatbuffers.Table
}

func GetRootAsNotification(buf []byte, offset flatbuffers.UOffsetT) *Notification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Notification{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Notification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Notification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Notification) Sms() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Notification) MutateSms(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *Notification) Push() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Notification) MutatePush(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *Notification) Email() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Notification) MutateEmail(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func NotificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func NotificationAddSms(builder *flatbuffers.Builder, sms bool) {
	builder.PrependBoolSlot(0, sms, false)
}
func NotificationAddPush(builder *flatbuffers.Builder, push bool) {
	builder.PrependBoolSlot(1, push, false)
}
func NotificationAddEmail(builder *flatbuffers.Builder, email bool) {
	builder.PrependBoolSlot(2, email, false)
}
func NotificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
